/*
 * This file was generated by the Gradle 'social.init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/tutorial_java_projects.html
 *
 */

buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'war'
    id 'idea'
}

//apply plugin: 'java'
//apply plugin: 'war'
//apply plugin: 'idea'
//apply plugin: 'org.springframework.boot'
//apply plugin: 'io.spring.dependency-management'

//plugins {
    // Apply the java plugin to add support for Java
    // id 'java'

    // Apply the application plugin to add support for building an application
    // id 'application'

    /// Work via Gretty
    // id 'war'
    // id 'org.gretty' version '2.2.0'

    /// Docker
    // id 'com.bmuschko.docker-remote-api' version '4.10.0'

    // Плагин gradle для спринга
    // See https://docs.spring.io/spring-boot/docs/2.0.x/gradle-plugin/reference/html/
//    id 'org.springframework.boot' version '2.2.1.RELEASE'
//    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
//    id 'java'
//    id 'idea'
//}

group = 'com.social'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

def springVersion = '5.2.1.RELEASE'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//subprojects {
//    gretty { // Не работает
//        scanInterval = 1 //Scan for changes every second
//        managedClassReload = true //Activate spring-loaded class reloading
//        port = 8082
//        // servletContainer = jetty94
//    }
//}

//task finalize (type: Copy) {
//    doLast {
//        println 'copy war'
//        copy{
//            from ('build/libs/*'){
//                exclude '*.txt'
//            }
//            into 'docker/app'
//        }
//    }
//}

// таска отрабатывает автоматом при запуске gradlew war, но не работает - ничего не копируется
//task copyWar(type: Copy) {
//    println 'copy war into docker folder'
//    from('build/libs')
//    into('docker/app')
//}

// apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

// apply from: 'docker.gradle'

// apply plugin: 'com.bmuschko.docker-remote-api'


// Define the main class for the application
// mainClassName = 'App'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    // jcenter()
    mavenCentral()
    // maven { url 'https://repo.spring.io/libs-milestone' }
    // mavenLocal()
    // gradlePluginPortal()
    // maven {      url 'https://plugins.gradle.org/m2/'    }
}

dependencies {

    // providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    // This dependency is found on compile classpath of this component and consumers.
    // compile 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    // testCompile 'junit:junit:4.12'

    //// classpath 'com.bmuschko:gradle-docker-plugin:4.10.0'
//    classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")

    // testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    // compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta0' // version: '1.7.28'
    // compile group: 'org.eclipse.jetty', name: 'apache-jstl', version: '9.4.21.v20190926'

    // [!] Вариант с явным указанием всех пакетов
//    compile group: 'org.springframework', name: 'spring-core', version: $ { springVersion }
//    compile group: 'org.springframework', name: 'spring-webmvc', version: $ { springVersion }
//    compile group: 'org.springframework', name: 'spring-context', version: $ { springVersion }
//    compile group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.0.0.Alpha2'
//    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'

    // [!] варант с использованием стартера (сгенерено на spring.io)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    // providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.springframework.boot:spring-boot-starter-tomcat' // Changed providedRuntime to 'compile' to be able to run via app main method
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'

    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
//    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '2.0.0-alpha1'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '2.0.0-alpha1'





//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.session:spring-session-core'
//    compileOnly 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    annotationProcessor 'org.projectlombok:lombok'
//    testImplementation('org.springframework.boot:spring-boot-starter-test') {
//        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//    }
    // compile group: 'javax.servlet.jsp.jstl', name: 'jstl-api', version: '1.2'
    // compile group: 'javax.servlet.jsp.jstl', name: 'javax.servlet.jsp.jstl-api', version: '1.2.2'
    // compile group: 'javax.servlet.jsp.jstl', name: 'jstl-api', version: '1.2'

//    providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.3'
//    compile group: 'javax.servlet.jsp.jstl', name: 'jstl', version: '1.2'

    // https://www.codeflow.site/ru/article/spring-webflux
    // compile group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.2.1.RELEASE'

}

test {
    useJUnitPlatform()
}

// Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
// gretty {
//     scanInterval = 1 //Scan for changes every second
//     managedClassReload = true //Activate spring-loaded class reloading
//     httpPort = 8082
//     servletContainer = 'jetty9.4'
//     // inplaceMode = 'soft'
// }





